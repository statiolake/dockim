name: Auto-Update Documentation

on:
  push:
    branches: ["master", "main"]
    paths-ignore:
      - "docs/**"
      - ".github/workflows/deploy-pages.yml"
      - ".github/workflows/auto-doc-update.yml"
      - "book/**"
      - "*.md"
  workflow_dispatch:
    inputs:
      changes_description:
        description: "Brief description of the changes made"
        required: false
        default: "Code changes detected"

jobs:
  analyze-and-update-docs:
    runs-on: ubuntu-latest
    if: github.event.head_commit.message != 'Auto-update documentation' && !contains(github.event.head_commit.message, '[skip-docs]')

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get changed files
        id: changed-files
        run: |
          # Get list of changed files in the last commit
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(rs|ts|js|py|go|java|cpp|c|h)$' || echo "")

          # Format the file list
          if [ -n "$CHANGED_FILES" ]; then
            echo "files<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Get commit details
        id: commit-info
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          COMMIT_HASH=$(git log -1 --pretty=format:"%H")

          echo "message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          echo "author=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
          echo "hash=${COMMIT_HASH:0:7}" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        if: steps.changed-files.outputs.has_changes == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "24"

      - name: Analyze and update documentation
        if: steps.changed-files.outputs.has_changes == 'true'
        id: claude-analysis
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          direct_prompt: |
            I need you to analyze recent code changes and update documentation for the Dockim project.

            ## Repository Context
            Dockim is a command-line tool for managing development containers with:
            - Built-in Neovim integration with remote UI
            - Simplified port management
            - Template-based project initialization
            - Container lifecycle management

            ## Recent Changes
            **Commit**: ${{ steps.commit-info.outputs.hash }} by ${{ steps.commit-info.outputs.author }}
            **Message**: ${{ steps.commit-info.outputs.message }}

            **Changed Files:**
            ${{ steps.changed-files.outputs.files }}

            ## Documentation Structure
            Both English (docs/en/src/) and Japanese (docs/ja/src/) versions exist:
            1. README.md - Introduction
            2. getting-started.md - Installation and setup
            3. user-guide/ - Core usage patterns
            4. neovim-integration.md - Neovim remote UI
            5. port-management.md - Port forwarding
            6. configuration.md - Settings and config
            7. commands-reference.md - CLI commands
            8. advanced-usage.md - Complex scenarios
            9. troubleshooting.md - Problem resolution
            10. contributing.md - Development guidelines
            11. faq.md - Common questions

            ## Task
            Please:
            1. Read and analyze the changed source files to understand what was modified
            2. Determine if any documentation needs updates based on the code changes
            3. If updates are needed, modify the appropriate documentation files in both English and Japanese
            4. Focus on user-facing changes, new features, API changes, configuration changes
            5. If no updates are needed, create a file called "NO_UPDATES_NEEDED.txt"

            Please proceed to analyze and update the documentation as necessary.

      - name: Check if updates were made
        if: steps.changed-files.outputs.has_changes == 'true'
        id: check-updates
        run: |
          if [ -f "NO_UPDATES_NEEDED.txt" ]; then
            echo "updates_needed=false" >> $GITHUB_OUTPUT
            echo "No documentation updates needed."
          else
            # Check if any documentation files were modified
            if [ -n "$(git status --porcelain docs/)" ]; then
              echo "updates_needed=true" >> $GITHUB_OUTPUT
              echo "Documentation updates were made."
            else
              echo "updates_needed=false" >> $GITHUB_OUTPUT
              echo "No documentation changes detected."
            fi
          fi

      - name: Create documentation update branch
        if: steps.check-updates.outputs.updates_needed == 'true'
        run: |
          # Create and checkout new branch
          BRANCH_NAME="auto-docs-update-${{ steps.commit-info.outputs.hash }}"
          git checkout -b "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Apply documentation updates
        if: steps.claude-analysis.outputs.updates_needed == 'true'
        run: |
          export PATH="$HOME/.local/bin:$PATH"

          # Use Claude Code to apply the suggested updates
          claude --no-input << 'CLAUDE_EOF'
          Based on your previous analysis in claude_response.md, please now apply the suggested documentation updates.

          For each file that needs updates:
          1. Read the current content
          2. Apply the necessary changes
          3. Ensure consistency between English and Japanese versions
          4. Maintain the existing documentation style and formatting

          Please proceed to update the documentation files as suggested.
          CLAUDE_EOF

      - name: Commit and push changes
        if: steps.check-updates.outputs.updates_needed == 'true'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action (Claude Code)"

          # Check if there are any changes to commit
          if [ -n "$(git status --porcelain)" ]; then
            git add docs/
            git commit -m "Auto-update documentation

            Updates documentation based on code changes in commit ${{ steps.commit-info.outputs.hash }}:
            ${{ steps.commit-info.outputs.message }}

            Changed files:
            ${{ steps.changed-files.outputs.files }}

            Generated by Claude Code GitHub Action"

            git push origin "$BRANCH_NAME"
            echo "CHANGES_COMMITTED=true" >> $GITHUB_ENV
          else
            echo "CHANGES_COMMITTED=false" >> $GITHUB_ENV
            echo "No changes to commit."
          fi

      - name: Create Pull Request
        if: steps.check-updates.outputs.updates_needed == 'true' && env.CHANGES_COMMITTED == 'true'
        run: |
          export PATH="$HOME/.local/bin:$PATH"

          # Install GitHub CLI if not available
          if ! command -v gh &> /dev/null; then
            sudo apt update
            sudo apt install -y gh
          fi

          # Create pull request
          gh pr create \
            --title "📚 Auto-update documentation for commit ${{ steps.commit-info.outputs.hash }}" \
            --body "$(cat << 'PR_BODY_EOF'
          ## 🤖 Automated Documentation Update

          This PR was automatically generated by Claude Code to update documentation based on recent code changes.

          ### 📋 Change Summary
          - **Commit**: ${{ steps.commit-info.outputs.hash }} by ${{ steps.commit-info.outputs.author }}
          - **Message**: ${{ steps.commit-info.outputs.message }}
          - **Trigger**: Code changes detected in source files

          ### 📁 Changed Files
          ```
          ${{ steps.changed-files.outputs.files }}
          ```

          ### 📖 Documentation Updates
          This PR includes updates to keep the documentation in sync with the code changes. Both English and Japanese versions have been updated where applicable.

          ### ✅ Review Checklist
          - [ ] Documentation accurately reflects code changes
          - [ ] Both English and Japanese versions are consistent
          - [ ] Examples and code snippets are up to date
          - [ ] Links and cross-references are correct

          ### 🔍 How to Review
          1. Check that the documentation changes match the code changes
          2. Verify that examples and usage instructions are accurate
          3. Ensure both language versions convey the same information
          4. Test any code examples or commands mentioned

          ---

          🤖 *Generated automatically by [Claude Code GitHub Action](https://github.com/features/actions)*

          If you believe this update is incorrect or unnecessary, please close this PR and add `[skip-docs]` to your commit message to prevent future automatic updates for similar changes.
          PR_BODY_EOF
          )" \
            --base master \
            --head "$BRANCH_NAME" \
            --label "documentation,automated,claude-code"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add comment to original commit
        if: steps.check-updates.outputs.updates_needed == 'true' && env.CHANGES_COMMITTED == 'true'
        run: |
          export PATH="$HOME/.local/bin:$PATH"

          # Add comment to the original commit
          gh api \
            --method POST \
            "/repos/${{ github.repository }}/commits/${{ github.sha }}/comments" \
            --field body="📚 **Documentation Update Available**

          An automated documentation update has been created based on the changes in this commit.

          **PR**: #$(gh pr view $BRANCH_NAME --json number --jq .number)
          **Branch**: \`$BRANCH_NAME\`

          Please review the proposed documentation changes to ensure they accurately reflect your code changes."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        if: always()
        run: |
          echo "## 📊 Auto-Documentation Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.changed-files.outputs.has_changes }}" = "true" ]; then
            echo "✅ **Code changes detected**" >> $GITHUB_STEP_SUMMARY
            echo "- Changed files: ${{ steps.changed-files.outputs.files }}" >> $GITHUB_STEP_SUMMARY
            echo "- Commit: ${{ steps.commit-info.outputs.hash }} by ${{ steps.commit-info.outputs.author }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "${{ steps.check-updates.outputs.updates_needed }}" = "true" ]; then
              echo "📝 **Documentation updates needed**" >> $GITHUB_STEP_SUMMARY

              if [ "${{ env.CHANGES_COMMITTED }}" = "true" ]; then
                echo "✅ **Pull request created**: \`${{ env.BRANCH_NAME }}\`" >> $GITHUB_STEP_SUMMARY
              else
                echo "ℹ️ **No changes to commit** (documentation may already be up to date)" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "ℹ️ **No documentation updates needed**" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "ℹ️ **No relevant code changes detected**" >> $GITHUB_STEP_SUMMARY
          fi
